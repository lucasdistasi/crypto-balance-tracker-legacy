plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.1'
    id 'io.spring.dependency-management' version '1.1.0'
    id "org.owasp.dependencycheck" version "8.2.1"
    id 'org.sonarqube' version '3.3'
    id 'jacoco'
    id 'com.avast.gradle.docker-compose' version '0.14.3'
}

ext {
    gitHubErosbVersion = "1.14.2"
    orgJsonVersion = "20230618"
    googleCodeGsonVersion = "2.10.1"
    javaxCacheVersion = "1.1.1"
    orgEhcacheVersion = "3.10.8"
    springDocVersion = "2.1.0"
    springBootVersion = '3.1.1'
    jsonWebTokenVersion = "0.11.5"
    jacocoVersion = "0.8.8"
    jacocoExecPath = "${project.rootDir}/../target/jacoco.exec"
    okHttp3Version = "4.11.0"
    logbackVersion = "1.4.8"
    springRetryVersion = "2.0.2"
    aspectjweaverVersion = "1.9.19"
    ioMicrometerVersion = "1.11.1"
}

group = 'com.distasilucas'
version = '1.0.0-SNAPSHOT'
sourceCompatibility = '17'

bootJar {
    archiveFileName = "${project.name}.jar"
    launchScript()
}

sonarqube {
    properties {
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.dynamicAnalysis", "reuseReports"
        property "sonar.jacoco.reportPaths", jacocoExecPath
        property "sonar.language", "java"
        property 'sonar.host.url', 'http://localhost:9000'
        property 'sonar.login', 'your_username'
        property 'sonar.password', 'your_password'
        property 'sonar.coverage.exclusions', 'src/main/java/com/distasilucas/cryptobalancetracker/configuration/**,' +
                'src/main/java/com/distasilucas/cryptobalancetracker/model/**,' +
                'src/main/java/com/distasilucas/cryptobalancetracker/CryptoBalanceTrackerApplication.java,' +
                'src/main/java/com/distasilucas/cryptobalancetracker/entity/**,' +
                'src/main/java/com/distasilucas/cryptobalancetracker/validation/Validation.java,' +
                'src/main/java/com/distasilucas/cryptobalancetracker/validation/JsonSchemaValidator.java,' +
                'src/main/java/com/distasilucas/cryptobalancetracker/validation/crypto/CryptoJsonSchemaConfig.java,' +
                'src/main/java/com/distasilucas/cryptobalancetracker/validation/crypto/CryptoSchemaValidator.java,' +
                'src/main/java/com/distasilucas/cryptobalancetracker/validation/platform/PlatformJsonSchemaConfig.java,' +
                'src/main/java/com/distasilucas/cryptobalancetracker/validation/platform/PlatformSchemaValidator.java,' +
                'src/main/java/com/distasilucas/cryptobalancetracker/validation/goal/GoalJsonSchemaConfig.java,' +
                'src/main/java/com/distasilucas/cryptobalancetracker/validation/goal/GoalSchemaValidator.java'
    }
}

tasks.named('sonarqube').configure {
    dependsOn test
}

jacoco {
    toolVersion = jacocoVersion
}

test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/distasilucas/cryptobalancetracker/configuration/**",
                    "com/distasilucas/cryptobalancetracker/model/**",
                    "com/distasilucas/cryptobalancetracker/CryptoBalanceTrackerApplication.java",
                    "com/distasilucas/cryptobalancetracker/entity/**",
                    "com/distasilucas/cryptobalancetracker/validation/Validation.java",
                    "com/distasilucas/cryptobalancetracker/validation/JsonSchemaValidator.java",
                    "com/distasilucas/cryptobalancetracker/validation/crypto/CryptoJsonSchemaConfig.java",
                    "com/distasilucas/cryptobalancetracker/validation/crypto/CryptoSchemaValidator.java",
                    "com/distasilucas/cryptobalancetracker/validation/platform/PlatformJsonSchemaConfig.java",
                    "com/distasilucas/cryptobalancetracker/validation/platform/PlatformSchemaValidator.java",
                    "com/distasilucas/cryptobalancetracker/validation/goal/GoalJsonSchemaConfig.java",
                    "com/distasilucas/cryptobalancetracker/validation/goal/GoalSchemaValidator.java"
            ])
        }))
    }

    reports {
        csv.enabled true
        html.enabled true
    }

    classDirectories.setFrom(files("${project.buildDir}/classes/java/main"))
    sourceDirectories.setFrom(files("${project.projectDir}/src/main/java"))
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-webflux"
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation "org.springframework.boot:spring-boot-starter-webflux"
    implementation "org.springframework.boot:spring-boot-starter-cache"
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation "com.github.erosb:everit-json-schema:${gitHubErosbVersion}"
    implementation "org.json:json:${orgJsonVersion}"
    implementation "com.google.code.gson:gson:${googleCodeGsonVersion}"
    implementation "javax.cache:cache-api:${javaxCacheVersion}"
    implementation "org.ehcache:ehcache:${orgEhcacheVersion}"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springDocVersion}"
    implementation "org.springframework.boot:spring-boot-starter-data-mongodb:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
    implementation "io.jsonwebtoken:jjwt-api:${jsonWebTokenVersion}"
    implementation "com.squareup.okhttp3:okhttp:${okHttp3Version}"
    implementation "ch.qos.logback:logback-core:${logbackVersion}"
    implementation "org.springframework.retry:spring-retry:${springRetryVersion}"
    implementation "io.micrometer:micrometer-registry-prometheus:${ioMicrometerVersion}"

    runtimeOnly "io.jsonwebtoken:jjwt-impl:${jsonWebTokenVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jsonWebTokenVersion}"
    runtimeOnly "org.aspectj:aspectjweaver:${aspectjweaverVersion}"

    compileOnly "org.projectlombok:lombok"

    annotationProcessor "org.projectlombok:lombok"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "io.projectreactor:reactor-test"
    testImplementation "com.squareup.okhttp3:mockwebserver:${okHttp3Version}"
}

tasks.named('test') {
    useJUnitPlatform()
}
